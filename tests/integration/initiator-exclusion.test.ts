/**
 * ‚≠ê –°–ê–ú–´–ô –ö–†–ò–¢–ò–ß–ù–´–ô TEST ‚≠ê
 *
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ Initiator Exclusion:
 * - Client A –¥–µ–ª–∞–µ—Ç UPDATE ‚Üí –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ HTTP
 * - Client B ‚Üí –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ SSE
 * - Client A –ù–ï –ø–æ–ª—É—á–∞–µ—Ç —á–µ—Ä–µ–∑ SSE (no duplication!)
 */

import { describe, it, expect, beforeAll, afterAll, vi } from 'vitest';
import app from '../../src/lib/server/api/index';
import { pool } from '../../src/lib/server/db/pool';
import { sseManager } from '../../src/lib/server/sync/sse-manager';
import { syncManager } from '../../src/lib/server/sync/sync-manager';
import { postgresListener } from '../../src/lib/server/sync/postgres-listener';

describe('‚≠ê INITIATOR EXCLUSION ‚≠ê', () => {
	const TEST_USER_ID = '00000000-0000-0000-0000-000000000001';
	const TEST_SESSION_TOKEN = 'demo-session-token';

	beforeAll(async () => {
		// –ó–∞–ø—É—Å–∫–∞–µ–º PostgreSQL Listener
		if (!postgresListener.isActive()) {
			await postgresListener.start();
		}
		await new Promise((resolve) => setTimeout(resolve, 1000));
	});

	afterAll(async () => {
		// –ù–ï –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º listener (–º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–∏–º–∏ —Ç–µ—Å—Ç–∞–º–∏)
		// await postgresListener.stop();
	});

	it('Client A (initiator) –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ HTTP, –ù–ï —á–µ—Ä–µ–∑ SSE', async () => {
		// –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ —Ç–µ—Å—Ç–∞
		const testId = `init-test-${Date.now()}`;
		const clientA = `${testId}-a`;
		const clientB = `${testId}-b`;

		// Mock SSE streams
		const streamA = {
			writeSSE: vi.fn().mockResolvedValue(undefined),
			close: vi.fn(),
			onAbort: vi.fn(),
			sleep: vi.fn()
		};

		const streamB = {
			writeSSE: vi.fn().mockResolvedValue(undefined),
			close: vi.fn(),
			onAbort: vi.fn(),
			sleep: vi.fn()
		};

		try {
			// ==========================================
			// SETUP: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±–∞ –∫–ª–∏–µ–Ω—Ç–∞
			// ==========================================

			await sseManager.createConnection(clientA, TEST_USER_ID, streamA as any);
			await sseManager.createConnection(clientB, TEST_USER_ID, streamB as any);

			await syncManager.subscribeCollection('orders_active', TEST_USER_ID, clientA);
			await syncManager.subscribeCollection('orders_active', TEST_USER_ID, clientB);

			// –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
			await new Promise((resolve) => setTimeout(resolve, 100));

			// –û—á–∏—â–∞–µ–º –º–æ–∫–∏ –æ—Ç –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π (connected)
			streamA.writeSSE.mockClear();
			streamB.writeSSE.mockClear();

			console.log('üìã Setup complete: 2 clients registered and subscribed');

			// ==========================================
			// ACTION: Client A —Å–æ–∑–¥–∞—ë—Ç –∑–∞–∫–∞–∑
			// ==========================================

			const request = new Request('http://localhost/orders', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
					Authorization: `Bearer ${TEST_SESSION_TOKEN}`,
					'X-Client-Id': clientA // ‚≠ê –ò–ù–ò–¶–ò–ê–¢–û–†
				},
				body: JSON.stringify({
					pickup_address: 'Integration Test Pickup',
					delivery_address: 'Integration Test Delivery',
					total: 5000
				}),
				duplex: 'half'
			} as RequestInit);

			const response = await app.fetch(request, {});
			const result = await response.json();

			console.log('üìã Client A made POST /api/orders:', result);

			// ==========================================
			// ASSERTION 1: Client A –ø–æ–ª—É—á–∏–ª HTTP response
			// ==========================================

			expect(response.status).toBe(200);
			expect(result.success).toBe(true);
			expect(result.data).toBeDefined();
			expect(result.meta?.excluded_from_sse).toBe(true);

			console.log('‚úÖ ASSERTION 1: Client A received HTTP response');

			// ==========================================
			// ASSERTION 2: –ñ–¥—ë–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ NOTIFY
			// ==========================================

			await new Promise((resolve) => setTimeout(resolve, 1500));

			// ==========================================
			// ASSERTION 3: Client A –ù–ï –ø–æ–ª—É—á–∏–ª SSE ‚≠ê
			// ==========================================

			const clientA_SSE_calls = streamA.writeSSE.mock.calls.filter((call: any) => {
				try {
					const event = call[0];
					return event?.event === 'batch_update';
				} catch {
					return false;
				}
			});

			expect(clientA_SSE_calls.length).toBe(0);
			console.log('‚úÖ ASSERTION 3: Client A did NOT receive SSE (initiator excluded)');

			// ==========================================
			// ASSERTION 4: Client B –ø–æ–ª—É—á–∏–ª SSE ‚≠ê
			// ==========================================

			const clientB_SSE_calls = streamB.writeSSE.mock.calls.filter((call: any) => {
				try {
					const event = call[0];
					return event?.event === 'batch_update';
				} catch {
					return false;
				}
			});

			expect(clientB_SSE_calls.length).toBeGreaterThan(0);
			console.log('‚úÖ ASSERTION 4: Client B received SSE batch_update');

			// –ü–†–û–í–ï–†–ö–ê: –ë–∞—Ç—á —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
			const batchEvent = clientB_SSE_calls[0][0] as Record<string, unknown>;
			const batchData = JSON.parse(batchEvent.data as string) as Record<string, unknown>;

			const batchEventsData = batchData.events as Array<Record<string, unknown>>;
			expect(batchEventsData).toBeDefined();
			expect(batchEventsData.length).toBeGreaterThan(0);

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑
			const hasOrderEvent = batchEventsData.some(
				(e) =>
					e.entity_type === 'order' && (e.data_snapshot as Record<string, unknown>).total === 5000
			);
			expect(hasOrderEvent).toBe(true);

			console.log('‚úÖ ASSERTION 5: Batch contains correct order data');
		} finally {
			// Cleanup
			await sseManager.closeConnection(clientA);
			await sseManager.closeConnection(clientB);
		}
	}, 15000); // 15 —Å–µ–∫—É–Ω–¥ timeout

	it('Deduplication: –æ–¥–∏–Ω entity –æ–±–Ω–æ–≤–ª—ë–Ω 3 —Ä–∞–∑–∞ = 1 —Å–æ–±—ã—Ç–∏–µ –≤ –±–∞—Ç—á–µ', async () => {
		const userId = '00000000-0000-0000-0000-000000000001';
		const testId = `dedup-${Date.now()}`;
		const clientId = testId;

		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –£–ù–ò–ö–ê–õ–¨–ù–´–ô UUID –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞
		const crypto = await import('crypto');
		const testOrderId = crypto.randomUUID();

		const mockStream = { writeSSE: vi.fn().mockResolvedValue(undefined), close: vi.fn() };

		try {
			await sseManager.createConnection(clientId, userId, mockStream as any);
			await syncManager.subscribeCollection('orders_active', userId, clientId);

			// –ñ–¥—ë–º –ø–æ–¥–ø–∏—Å–∫–∏
			await new Promise((resolve) => setTimeout(resolve, 100));

			mockStream.writeSSE.mockClear();

			// –û–±–Ω–æ–≤–ª—è–µ–º –æ–¥–∏–Ω –∑–∞–∫–∞–∑ 3 —Ä–∞–∑–∞ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
			const client = await pool.connect();

			try {
				await client.query('BEGIN');
				await client.query(`SET LOCAL app.current_user_id = '${userId}'`);

				// –°–æ–∑–¥–∞—ë–º –ù–û–í–´–ô –∑–∞–∫–∞–∑ (UUID —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–ª—è —Ç–µ—Å—Ç–∞)
				await client.query(
					`INSERT INTO "order" (id, customer_id, pickup_address, delivery_address, total, status, version)
					 VALUES ($1, $2, 'P-Dedup', 'D-Dedup', 1500, 'pending', 1)`,
					[testOrderId, userId]
				);

				// –û–±–Ω–æ–≤–ª—è–µ–º 3 —Ä–∞–∑–∞
				await client.query(`UPDATE "order" SET status = 'accepted' WHERE id = $1`, [testOrderId]);
				await client.query(`UPDATE "order" SET status = 'in_progress' WHERE id = $1`, [
					testOrderId
				]);
				await client.query(`UPDATE "order" SET status = 'delivering' WHERE id = $1`, [testOrderId]);

				await client.query('SELECT flush_batch_notifications()');
				await client.query('COMMIT');
			} finally {
				client.release();
			}

			await new Promise((resolve) => setTimeout(resolve, 1000));

			// –ü–†–û–í–ï–†–ö–ê: –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –û–î–ò–ù batch_update
			const batchCalls = mockStream.writeSSE.mock.calls.filter(
				(call: any) => call[0]?.event === 'batch_update'
			);

			expect(batchCalls.length).toBe(1);

			// –ü–†–û–í–ï–†–ö–ê: –í –±–∞—Ç—á–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –û–î–ù–û —Å–æ–±—ã—Ç–∏–µ –¥–ª—è order (–ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è)
			const batchData = JSON.parse(batchCalls[0][0].data as string) as Record<string, unknown>;
			const events = batchData.events as Array<Record<string, unknown>>;
			const orderEvents = events.filter(
				(e) => e.entity_type === 'order' && e.entity_id === testOrderId
			);

			// –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –¢–û–õ–¨–ö–û 1 —Å–æ–±—ã—Ç–∏–µ (–¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è)
			expect(orderEvents.length).toBe(1);

			// –í–µ—Ä—Å–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 4 (1 INSERT + 3 UPDATE)
			expect(orderEvents[0].entity_version).toBe(4);

			// –°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π
			expect((orderEvents[0].data_snapshot as Record<string, unknown>).status).toBe('delivering');

			console.log(
				`‚úÖ Deduplication works: 3 updates ‚Üí 1 event (version ${orderEvents[0].entity_version}, status: delivering)`
			);
		} finally {
			await sseManager.closeConnection(clientId);
		}
	}, 15000);
});
