/**
 * Test Setup
 *
 * –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
 */

import { beforeAll, afterAll, afterEach } from 'vitest';
import { cleanupRedis, cleanupDatabase } from './fixtures/test-utils';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π setup –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ —Ç–µ—Å—Ç–∞–º–∏
beforeAll(async () => {
	console.log('üß™ Initializing test environment...');

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Docker –∑–∞–ø—É—â–µ–Ω (—Ç–æ–ª—å–∫–æ –¥–ª—è integration —Ç–µ—Å—Ç–æ–≤)
	if (
		process.env.VITEST_POOL_ID?.includes('integration') ||
		process.env.VITEST_POOL_ID?.includes('api')
	) {
		const { pool } = await import('../src/lib/server/db/pool');

		try {
			const client = await pool.connect();
			await client.query('SELECT 1');
			client.release();
			console.log('‚úÖ PostgreSQL connected');
		} catch (err) {
			console.error('‚ùå PostgreSQL not available. Run: pnpm db:start');
			throw err;
		}
	}

	console.log('‚úÖ Test environment ready\n');
});

// Cleanup –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è integration)
afterEach(async () => {
	if (
		process.env.VITEST_POOL_ID?.includes('integration') ||
		process.env.VITEST_POOL_ID?.includes('api')
	) {
		await cleanupRedis();
	}
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π cleanup –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
afterAll(async () => {
	if (
		process.env.VITEST_POOL_ID?.includes('integration') ||
		process.env.VITEST_POOL_ID?.includes('api')
	) {
		console.log('\nüßπ Cleaning up test environment...');

		await cleanupDatabase();
		await cleanupRedis();

		// –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
		const { pool } = await import('../src/lib/server/db/pool');
		const { redis } = await import('../src/lib/server/redis');

		await pool.end();
		await redis.quit();

		console.log('‚úÖ Test environment cleaned up');
	}
});
