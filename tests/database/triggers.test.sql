-- ============================================================================
-- DATABASE TESTS: –¢—Ä–∏–≥–≥–µ—Ä—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏
-- ============================================================================

-- –≠—Ç–∏ —Ç–µ—Å—Ç—ã –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ PostgreSQL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
-- —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤, RLS –ø–æ–ª–∏—Ç–∏–∫ –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π

\echo 'üß™ Testing database triggers and functions...\n'

-- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: —Å–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
BEGIN;

SET LOCAL app.current_user_id = '00000000-0000-0000-0000-000000000001';
SET LOCAL app.initiator_client_id = 'test-client-123';

-- –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ—Ç
INSERT INTO "user" (id, nickname, email, role)
VALUES ('00000000-0000-0000-0000-000000000001', 'Test User', 'test@example.com', 'user')
ON CONFLICT (id) DO NOTHING;

COMMIT;

\echo '‚úÖ Test user created\n'

-- ============================================================================
-- TEST 1: –¢—Ä–∏–≥–≥–µ—Ä –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ—Ç –≤–µ—Ä—Å–∏—é –ø—Ä–∏ UPDATE
-- ============================================================================

\echo 'TEST 1: Version increment on UPDATE...'

BEGIN;

SET LOCAL app.current_user_id = '00000000-0000-0000-0000-000000000001';

-- –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
INSERT INTO "user" (id, nickname, email, version)
VALUES ('10000000-0000-0000-0000-000000000001', 'Version Test', 'version@test.com', 1)
ON CONFLICT (id) DO UPDATE SET version = 1;

-- –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤–µ—Ä—Å–∏—é
DO $$
DECLARE
  old_version INTEGER;
  new_version INTEGER;
BEGIN
  SELECT version INTO old_version FROM "user" WHERE id = '10000000-0000-0000-0000-000000000001';
  
  -- –û–±–Ω–æ–≤–ª—è–µ–º
  UPDATE "user" SET nickname = 'Updated Name' WHERE id = '10000000-0000-0000-0000-000000000001';
  
  SELECT version INTO new_version FROM "user" WHERE id = '10000000-0000-0000-0000-000000000001';
  
  -- –ü—Ä–æ–≤–µ—Ä–∫–∞
  IF new_version = old_version + 1 THEN
    RAISE NOTICE '  ‚úÖ Version incremented: % -> %', old_version, new_version;
  ELSE
    RAISE EXCEPTION '  ‚ùå Version not incremented! Old: %, New: %', old_version, new_version;
  END IF;
END $$;

ROLLBACK;

-- ============================================================================
-- TEST 2: –¢—Ä–∏–≥–≥–µ—Ä —Å–æ–∑–¥–∞—ë—Ç pending_notification
-- ============================================================================

\echo 'TEST 2: Pending notification created...'

BEGIN;

SET LOCAL app.current_user_id = '00000000-0000-0000-0000-000000000001';
SET LOCAL app.initiator_client_id = 'test-client-456';

-- –û—á–∏—â–∞–µ–º pending_notifications
DELETE FROM pending_notification;

-- –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ (–¥–ª—è order –µ—Å—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏–∏)
INSERT INTO "order" (id, customer_id, pickup_address, delivery_address, total, status)
VALUES ('20000000-0000-0000-0000-000000000001', '00000000-0000-0000-0000-000000000001', 'Test Pickup', 'Test Delivery', 1000, 'pending')
ON CONFLICT (id) DO UPDATE SET status = 'pending', version = "order".version;

-- –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ (—Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç buffer_entity_notification)
UPDATE "order" 
SET status = 'accepted' 
WHERE id = '20000000-0000-0000-0000-000000000001';

-- –ü—Ä–æ–≤–µ—Ä—è–µ–º pending_notifications
DO $$
DECLARE
  notification_count INTEGER;
  payload_data JSONB;
BEGIN
  SELECT COUNT(*) INTO notification_count FROM pending_notification;
  
  IF notification_count > 0 THEN
    RAISE NOTICE '  ‚úÖ Pending notification created (count: %)', notification_count;
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º payload
    SELECT payload INTO payload_data FROM pending_notification LIMIT 1;
    
    IF payload_data->>'entity_type' = 'order' THEN
      RAISE NOTICE '  ‚úÖ Entity type correct: order';
    ELSE
      RAISE EXCEPTION '  ‚ùå Wrong entity_type: %', payload_data->>'entity_type';
    END IF;
    
    IF payload_data->>'initiator_client_id' = 'test-client-456' THEN
      RAISE NOTICE '  ‚úÖ Initiator client ID preserved: test-client-456';
    ELSE
      RAISE EXCEPTION '  ‚ùå Initiator client ID wrong: %', payload_data->>'initiator_client_id';
    END IF;
  ELSE
    RAISE EXCEPTION '  ‚ùå No pending notification created!';
  END IF;
END $$;

ROLLBACK;

-- ============================================================================
-- TEST 3: flush_batch_notifications –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç NOTIFY
-- ============================================================================

\echo 'TEST 3: flush_batch_notifications() works...'

BEGIN;

SET LOCAL app.current_user_id = '00000000-0000-0000-0000-000000000001';
SET LOCAL app.initiator_client_id = 'batch-test-client';

-- –°–æ–∑–¥–∞—ë–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π
DELETE FROM pending_notification;

-- –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑—ã
INSERT INTO "order" (id, customer_id, pickup_address, delivery_address, total, status)
VALUES 
  ('30000000-0000-0000-0000-000000000001', '00000000-0000-0000-0000-000000000001', 'P1', 'D1', 1000, 'pending'),
  ('30000000-0000-0000-0000-000000000002', '00000000-0000-0000-0000-000000000001', 'P2', 'D2', 2000, 'pending')
ON CONFLICT (id) DO NOTHING;

-- –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–∞ –∑–∞–∫–∞–∑–∞
UPDATE "order" SET status = 'accepted' WHERE id = '30000000-0000-0000-0000-000000000001';
UPDATE "order" SET status = 'accepted' WHERE id = '30000000-0000-0000-0000-000000000002';

-- –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å pending notifications
DO $$
DECLARE
  pending_count INTEGER;
BEGIN
  SELECT COUNT(*) INTO pending_count FROM pending_notification;
  
  IF pending_count >= 2 THEN
    RAISE NOTICE '  ‚úÖ Multiple pending notifications: %', pending_count;
  ELSE
    RAISE EXCEPTION '  ‚ùå Expected at least 2 pending notifications, got %', pending_count;
  END IF;
END $$;

-- –í—ã–∑—ã–≤–∞–µ–º flush (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –≤—ã–∑–æ–≤–µ—Ç pg_notify, –Ω–æ –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å LISTEN –∑–¥–µ—Å—å)
SELECT flush_batch_notifications();

-- –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—á–∏—Å—Ç–∏–ª–æ—Å—å
DO $$
DECLARE
  pending_count INTEGER;
BEGIN
  SELECT COUNT(*) INTO pending_count FROM pending_notification;
  
  IF pending_count = 0 THEN
    RAISE NOTICE '  ‚úÖ Pending notifications cleared after flush';
  ELSE
    RAISE EXCEPTION '  ‚ùå Pending notifications not cleared: %', pending_count;
  END IF;
END $$;

ROLLBACK;

-- ============================================================================
-- TEST 4: RLS Policy - User –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã
-- ============================================================================

\echo 'TEST 4: RLS policies work...'

BEGIN;

-- –°–æ–∑–¥–∞—ë–º –¥–≤—É—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
INSERT INTO "user" (id, nickname, email)
VALUES 
  ('40000000-0000-0000-0000-000000000001', 'User A', 'usera@test.com'),
  ('40000000-0000-0000-0000-000000000002', 'User B', 'userb@test.com')
ON CONFLICT (id) DO NOTHING;

-- –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑—ã –¥–ª—è User A
INSERT INTO "order" (id, customer_id, pickup_address, delivery_address, total, status)
VALUES 
  ('50000000-0000-0000-0000-000000000001', '40000000-0000-0000-0000-000000000001', 'Address A1', 'Address A2', 1000, 'pending')
ON CONFLICT (id) DO NOTHING;

-- –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ –¥–ª—è User B
INSERT INTO "order" (id, customer_id, pickup_address, delivery_address, total, status)
VALUES 
  ('50000000-0000-0000-0000-000000000002', '40000000-0000-0000-0000-000000000002', 'Address B1', 'Address B2', 2000, 'pending')
ON CONFLICT (id) DO NOTHING;

-- User A —á–∏—Ç–∞–µ—Ç –∑–∞–∫–∞–∑—ã
SET LOCAL app.current_user_id = '40000000-0000-0000-0000-000000000001';

DO $$
DECLARE
  order_count INTEGER;
  wrong_order_visible BOOLEAN;
BEGIN
  -- User A –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –∑–∞–∫–∞–∑
  SELECT COUNT(*) INTO order_count FROM "order" WHERE customer_id = '40000000-0000-0000-0000-000000000001';
  
  IF order_count = 1 THEN
    RAISE NOTICE '  ‚úÖ User A sees own order';
  ELSE
    RAISE EXCEPTION '  ‚ùå User A order count wrong: %', order_count;
  END IF;
  
  -- User A –ù–ï –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å –∑–∞–∫–∞–∑ User B —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π SELECT
  SELECT EXISTS (
    SELECT 1 FROM "order" WHERE id = '50000000-0000-0000-0000-000000000002'
  ) INTO wrong_order_visible;
  
  IF wrong_order_visible THEN
    RAISE NOTICE '  ‚ö†Ô∏è  WARNING: User A can see User B order (RLS may be disabled for superuser)';
  ELSE
    RAISE NOTICE '  ‚úÖ User A cannot see User B order';
  END IF;
END $$;

ROLLBACK;

\echo '\n‚úÖ All database tests passed!\n'

