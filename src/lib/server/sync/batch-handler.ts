/**
 * Batch Update Handler
 *
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç PostgreSQL NOTIFY
 * - –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
 * - –ò—Å–∫–ª—é—á–µ–Ω–∏–µ initiator –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏
 * - Chunking –±–æ–ª—å—à–∏—Ö –±–∞—Ç—á–µ–π
 * - Custom access filtering
 */

import { redis, RedisKeys } from '../redis';
import { sseManager } from './sse-manager';

interface BatchEvent {
	entity_type: string;
	entity_id: string;
	entity_version: number;
	affected_collections: string[];
	affected_users: string[];
	data_snapshot: Record<string, unknown>;
	initiator_client_id?: string;
	operation: 'INSERT' | 'UPDATE' | 'DELETE';
}

interface BatchNotification {
	tx_id: string;
	events: BatchEvent[];
	timestamp: number;
	initiator_client_id?: string;
	event_count: number;
}

const MAX_BATCH_SIZE = 100; // –ú–∞–∫—Å–∏–º—É–º —Å–æ–±—ã—Ç–∏–π –≤ –æ–¥–Ω–æ–º SSE —Å–æ–æ–±—â–µ–Ω–∏–∏

export class BatchUpdateHandler {
	/**
	 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞—Ç—á –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	 */
	async handleBatch(payload: string): Promise<void> {
		let batch: BatchNotification;

		try {
			batch = JSON.parse(payload);
		} catch (error) {
			console.error('‚ùå Failed to parse batch notification:', error);
			return;
		}

		console.log(
			`üì¶ Processing batch ${batch.tx_id}: ${batch.event_count} events, initiator: ${batch.initiator_client_id || 'none'}`
		);

		// –°—Ç—Ä–æ–∏–º –±–∞—Ç—á–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π
		const clientBatches = await this.buildClientBatches(batch.events, batch.initiator_client_id);

		let totalSent = 0;

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–¥—É–ø–ª–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∞—Ç—á–∏
		for (const [clientId, dedupedEvents] of clientBatches) {
			// Chunking –¥–ª—è –±–æ–ª—å—à–∏—Ö –±–∞—Ç—á–µ–π
			const chunks = this.chunkEvents(dedupedEvents);

			for (let i = 0; i < chunks.length; i++) {
				const success = await sseManager.sendToClient(clientId, {
					type: 'batch_update',
					data: {
						tx_id: chunks.length > 1 ? `${batch.tx_id}_chunk_${i}` : batch.tx_id,
						timestamp: batch.timestamp,
						events: chunks[i],
						is_partial: chunks.length > 1,
						chunk_index: i,
						total_chunks: chunks.length
					}
				});

				if (success) {
					totalSent++;
				}
			}
		}

		console.log(
			`‚úÖ Batch ${batch.tx_id} processed: ${totalSent} messages sent to ${clientBatches.size} clients`
		);
	}

	/**
	 * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –±–∞—Ç—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π
	 */
	private async buildClientBatches(
		events: BatchEvent[],
		initiatorClientId?: string
	): Promise<Map<string, BatchEvent[]>> {
		const clientBatches = new Map<string, Map<string, BatchEvent>>();

		for (const event of events) {
			const { affected_users, affected_collections } = event;

			// –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞—Ç—Ä–æ–Ω—É—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			for (const userId of affected_users) {
				// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis
				const userClients = await redis.smembers(RedisKeys.userClients(userId));

				for (const clientId of userClients) {
					// –í–ê–ñ–ù–û: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º initiator
					if (initiatorClientId && clientId === initiatorClientId) {
						console.log(`   ‚è≠Ô∏è  Skipping initiator: ${clientId}`);
						continue;
					}

					// –ü—Ä–æ–≤–µ—Ä—è–µ–º: –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–∞ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏?
					const subscribedToAny = await this.isSubscribedToAny(
						clientId,
						userId,
						affected_collections
					);

					if (!subscribedToAny) {
						continue;
					}

					// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Map –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
					if (!clientBatches.has(clientId)) {
						clientBatches.set(clientId, new Map());
					}

					const clientEvents = clientBatches.get(clientId)!;
					const entityKey = `${event.entity_type}:${event.entity_id}`;

					// –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–Ø: –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é entity
					const existing = clientEvents.get(entityKey);
					if (!existing || existing.entity_version < event.entity_version) {
						clientEvents.set(entityKey, event);
					}
				}
			}
		}

		// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Map<entityKey, event> –≤ Array
		const result = new Map<string, BatchEvent[]>();
		for (const [clientId, eventsMap] of clientBatches) {
			result.set(clientId, Array.from(eventsMap.values()));
		}

		return result;
	}

	/**
	 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –∫–ª–∏–µ–Ω—Ç —Ö–æ—Ç—è –±—ã –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–π
	 */
	private async isSubscribedToAny(
		clientId: string,
		userId: string,
		collections: string[]
	): Promise<boolean> {
		// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
		const clientCollections = await redis.smembers(RedisKeys.clientCollections(clientId));
		const clientCollectionIds = new Set(clientCollections.map((key) => key.split(':')[0]));

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
		for (const collectionId of collections) {
			if (clientCollectionIds.has(collectionId)) {
				return true;
			}
		}

		return false;
	}

	/**
	 * –†–∞–∑–±–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –Ω–∞ —á–∞–Ω–∫–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö –±–∞—Ç—á–µ–π
	 */
	private chunkEvents(events: BatchEvent[]): BatchEvent[][] {
		if (events.length <= MAX_BATCH_SIZE) {
			return [events];
		}

		const chunks: BatchEvent[][] = [];
		for (let i = 0; i < events.length; i += MAX_BATCH_SIZE) {
			chunks.push(events.slice(i, i + MAX_BATCH_SIZE));
		}

		return chunks;
	}

	/**
	 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
	 */
	async handleAccessChange(userId: string, entityType: string, entityId: string): Promise<void> {
		const userClients = await redis.smembers(RedisKeys.userClients(userId));

		for (const clientId of userClients) {
			await sseManager.sendToClient(clientId, {
				type: 'access_changed',
				data: {
					entity_type: entityType,
					entity_id: entityId,
					timestamp: Date.now()
				}
			});
		}

		console.log(`üîê Access change notification sent to user ${userId}`);
	}

	/**
	 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –æ—Ç–∑—ã–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç—Ä–µ–±—É–µ—Ç —Ä–µ-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é)
	 */
	async handleAccessRevoked(userId: string): Promise<void> {
		const userClients = await redis.smembers(RedisKeys.userClients(userId));

		for (const clientId of userClients) {
			await sseManager.sendToClient(clientId, {
				type: 'access_revoked',
				data: {
					timestamp: Date.now(),
					message: 'Your access has been revoked. Please re-sync.'
				}
			});
		}

		console.log(`üö´ Access revoked notification sent to user ${userId}`);
	}
}

// Singleton instance
export const batchUpdateHandler = new BatchUpdateHandler();
