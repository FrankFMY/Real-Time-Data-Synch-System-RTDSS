/**
 * PostgreSQL Listener
 *
 * –°–ª—É—à–∞–µ—Ç NOTIFY —Å–æ–±—ã—Ç–∏—è –∏–∑ PostgreSQL –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –≤ Batch Handler
 */

import { pool } from '../db/pool';
import { batchUpdateHandler } from './batch-handler';
import type { PoolClient } from 'pg';

export class PostgresListener {
	private client: PoolClient | null = null;
	private isListening = false;

	/**
	 * –ó–∞–ø—É—Å—Ç–∏—Ç—å listener
	 */
	async start(): Promise<void> {
		if (this.isListening) {
			console.warn('‚ö†Ô∏è  PostgreSQL listener already running');
			return;
		}

		try {
			// –ü–æ–ª—É—á–∞–µ–º dedicated –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è LISTEN
			this.client = await pool.connect();

			// –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª batch_updates
			await this.client.query('LISTEN batch_updates');

			// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
			this.client.on('notification', async (msg) => {
				if (msg.channel === 'batch_updates' && msg.payload) {
					try {
						await batchUpdateHandler.handleBatch(msg.payload);
					} catch (error) {
						console.error('‚ùå Error handling batch:', error);
					}
				}
			});

			// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
			this.client.on('error', (err) => {
				console.error('‚ùå PostgreSQL listener error:', err);
				this.reconnect();
			});

			// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
			this.client.on('end', () => {
				console.warn('‚ö†Ô∏è  PostgreSQL listener connection ended');
				this.reconnect();
			});

			this.isListening = true;
			console.log('‚úÖ PostgreSQL listener started');
		} catch (error) {
			console.error('‚ùå Failed to start PostgreSQL listener:', error);
			throw error;
		}
	}

	/**
	 * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å listener
	 */
	async stop(): Promise<void> {
		if (!this.isListening || !this.client) {
			return;
		}

		try {
			await this.client.query('UNLISTEN batch_updates');
			this.client.release();
			this.client = null;
			this.isListening = false;
			console.log('‚úÖ PostgreSQL listener stopped');
		} catch (err) {
			console.error('‚ùå Error stopping PostgreSQL listener:', err);
		}
	}

	/**
	 * –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
	 */
	private async reconnect(): Promise<void> {
		console.log('üîÑ Reconnecting PostgreSQL listener...');

		this.isListening = false;

		if (this.client) {
			try {
				this.client.release();
			} catch {
				// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ release
			}
			this.client = null;
		}

		// –ñ–¥—ë–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
		await new Promise((resolve) => setTimeout(resolve, 5000));

		try {
			await this.start();
			console.log('‚úÖ PostgreSQL listener reconnected');
		} catch (err) {
			console.error('‚ùå Reconnection failed:', err);
			// –ü—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
			setTimeout(() => void this.reconnect(), 10000);
		}
	}

	/**
	 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
	 */
	isActive(): boolean {
		return this.isListening && this.client !== null;
	}
}

// Singleton instance
export const postgresListener = new PostgresListener();
