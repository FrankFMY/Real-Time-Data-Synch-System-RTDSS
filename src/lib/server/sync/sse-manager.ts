/**
 * SSE Manager
 *
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Server-Sent Events —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏ –¥–ª—è real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 */

import { redis, RedisKeys } from '../redis';
import type { SSEStreamingApi } from 'hono/streaming';

interface SSEConnection {
	clientId: string;
	userId: string;
	stream: SSEStreamingApi;
	connectedAt: number;
	lastHeartbeat: number;
}

export class SSEManager {
	private connections: Map<string, SSEConnection>;
	private heartbeatInterval: NodeJS.Timeout | null;

	constructor() {
		this.connections = new Map();
		this.heartbeatInterval = null;
	}

	/**
	 * –°–æ–∑–¥–∞—Ç—å SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
	 */
	async createConnection(clientId: string, userId: string, stream: SSEStreamingApi): Promise<void> {
		// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
		this.connections.set(clientId, {
			clientId,
			userId,
			stream,
			connectedAt: Date.now(),
			lastHeartbeat: Date.now()
		});

		// –î–æ–±–∞–≤–ª—è–µ–º –≤ Redis —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		await redis.sadd(RedisKeys.userClients(userId), clientId);

		console.log(`‚úÖ SSE connected: ${clientId} (user: ${userId})`);

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
		await this.sendToClient(clientId, {
			type: 'connected',
			data: { clientId, timestamp: Date.now() }
		});

		// –ó–∞–ø—É—Å–∫–∞–µ–º heartbeat –µ—Å–ª–∏ –µ—â—ë –Ω–µ –∑–∞–ø—É—â–µ–Ω
		if (!this.heartbeatInterval) {
			this.startHeartbeat();
		}
	}

	/**
	 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
	 */
	async sendToClient(clientId: string, event: { type: string; data: unknown }): Promise<boolean> {
		const connection = this.connections.get(clientId);
		if (!connection) {
			return false;
		}

		try {
			await connection.stream.writeSSE({
				data: JSON.stringify(event.data),
				event: event.type
			});
			return true;
		} catch (err) {
			console.error(`‚ùå Failed to send to ${clientId}:`, err);
			void this.closeConnection(clientId);
			return false;
		}
	}

	/**
	 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	 */
	async sendToUser(userId: string, event: { type: string; data: unknown }): Promise<number> {
		// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const clientIds = await redis.smembers(RedisKeys.userClients(userId));

		let sent = 0;
		for (const clientId of clientIds) {
			if (await this.sendToClient(clientId, event)) {
				sent++;
			}
		}

		return sent;
	}

	/**
	 * –ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
	 */
	async closeConnection(clientId: string): Promise<void> {
		const connection = this.connections.get(clientId);
		if (!connection) {
			return;
		}

		try {
			// –ó–∞–∫—Ä—ã–≤–∞–µ–º stream
			connection.stream.close();
		} catch {
			// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
		}

		// –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ Redis
		const collections = await redis.smembers(RedisKeys.clientCollections(clientId));

		for (const collectionKey of collections) {
			const [collectionId, userId] = collectionKey.split(':');
			await redis.srem(RedisKeys.collectionSubscriptions(collectionId, userId), clientId);
		}

		// –£–¥–∞–ª—è–µ–º –∏–∑ user_clients
		await redis.srem(RedisKeys.userClients(connection.userId), clientId);

		// –£–¥–∞–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π –∫–ª–∏–µ–Ω—Ç–∞
		await redis.del(RedisKeys.clientCollections(clientId));

		// –£–¥–∞–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø–∞–º—è—Ç–∏
		this.connections.delete(clientId);

		console.log(`üëã SSE closed: ${clientId}`);
	}

	/**
	 * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
	 */
	getConnection(clientId: string): SSEConnection | undefined {
		return this.connections.get(clientId);
	}

	/**
	 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	 */
	getUserConnections(userId: string): SSEConnection[] {
		const connections: SSEConnection[] = [];
		for (const connection of this.connections.values()) {
			if (connection.userId === userId) {
				connections.push(connection);
			}
		}
		return connections;
	}

	/**
	 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	 */
	getStats() {
		const users = new Set<string>();
		for (const connection of this.connections.values()) {
			users.add(connection.userId);
		}

		return {
			totalConnections: this.connections.size,
			uniqueUsers: users.size,
			avgConnectionsPerUser: users.size > 0 ? this.connections.size / users.size : 0
		};
	}

	/**
	 * Heartbeat –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
	 */
	private startHeartbeat(): void {
		this.heartbeatInterval = setInterval(async () => {
			const now = Date.now();
			const staleConnections: string[] = [];

			for (const [clientId, connection] of this.connections) {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º timeout (90 —Å–µ–∫—É–Ω–¥ –±–µ–∑ heartbeat)
				if (now - connection.lastHeartbeat > 90000) {
					staleConnections.push(clientId);
					continue;
				}

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º heartbeat (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
				try {
					await connection.stream.writeSSE({
						data: 'heartbeat',
						event: 'heartbeat'
					});
					connection.lastHeartbeat = now;
				} catch {
					staleConnections.push(clientId);
				}
			}

			// –ó–∞–∫—Ä—ã–≤–∞–µ–º stale —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
			for (const clientId of staleConnections) {
				console.log(`‚è±Ô∏è  Closing stale connection: ${clientId}`);
				void this.closeConnection(clientId);
			}
		}, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

		console.log('üíì SSE heartbeat started');
	}

	/**
	 * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å heartbeat
	 */
	stopHeartbeat(): void {
		if (this.heartbeatInterval) {
			clearInterval(this.heartbeatInterval);
			this.heartbeatInterval = null;
			console.log('üíî SSE heartbeat stopped');
		}
	}

	/**
	 * Cleanup –ø—Ä–∏ shutdown
	 */
	async shutdown(): Promise<void> {
		console.log('üõë Shutting down SSE Manager...');

		this.stopHeartbeat();

		// –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
		const clientIds = Array.from(this.connections.keys());
		for (const clientId of clientIds) {
			await this.closeConnection(clientId);
		}

		console.log('‚úÖ SSE Manager shut down');
	}
}

// Singleton instance
export const sseManager = new SSEManager();
