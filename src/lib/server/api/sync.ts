/**
 * Sync API Routes
 *
 * Endpoints –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:
 * - SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
 * - –ü–æ–¥–ø–∏—Å–∫–∞/–æ—Ç–ø–∏—Å–∫–∞ –æ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–π
 * - Differential sync
 */

import { Hono } from 'hono';
import { streamSSE } from 'hono/streaming';
import { sseManager, syncManager } from '../sync';
import { authMiddleware } from '../middleware/auth';
import { clientIdMiddleware } from '../middleware/client-id';
import type { HonoEnv } from './hono-types';
import { db } from '../db/index';
import { session as sessionTable } from '../db/schema';
import { eq } from 'drizzle-orm';

const app = new Hono<HonoEnv>();

/**
 * SSE Endpoint (–ë–ï–ó middleware - –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤–Ω—É—Ç—Ä–∏)
 * GET /api/sync/events
 *
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Server-Sent Events —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
 */
app.get('/events', async (c) => {
	// –î–ª—è SSE –∏—Å–ø–æ–ª—å–∑—É–µ–º token –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (EventSource –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç headers)
	const token = c.req.query('token');

	if (!token) {
		return c.json({ error: 'Token required in query' }, 401);
	}

	// –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
	const sessions = await db.select().from(sessionTable).where(eq(sessionTable.id, token)).limit(1);

	if (sessions.length === 0 || sessions[0].expiresAt < new Date()) {
		return c.json({ error: 'Invalid or expired session' }, 401);
	}

	const userId = sessions[0].userId;
	let clientId = c.req.query('client_id') || (c.get('clientId') as string);

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º clientId –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
	if (!clientId) {
		clientId = `client_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
	}

	console.log(`üîå SSE connection request: ${clientId} (user: ${userId})`);

	return streamSSE(c, async (stream) => {
		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
		stream.onAbort(() => {
			console.log(`üîå SSE aborted: ${clientId}`);
			void sseManager.closeConnection(clientId);
		});

		// –°–æ–∑–¥–∞–µ–º SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
		await sseManager.createConnection(clientId, userId, stream);

		// –î–µ—Ä–∂–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–º (heartbeat —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è SSEManager)
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª—å—à–æ–π, –Ω–æ —Ä–∞–∑—É–º–Ω—ã–π timeout (24 —á–∞—Å–∞)
		let keepAlive = true;
		stream.onAbort(() => {
			keepAlive = false;
		});

		while (keepAlive) {
			await stream.sleep(86400000); // 24 —á–∞—Å–∞
		}
	});
});

// –ü—Ä–∏–º–µ–Ω—è–µ–º middleware –∫–æ –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º routes
app.use('*', clientIdMiddleware);
app.use('*', authMiddleware);

/**
 * Subscribe to Collection
 * POST /api/sync/subscribe
 *
 * –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
 */
app.post('/subscribe', async (c) => {
	const userId = c.get('userId') as string;
	const clientId = c.get('clientId') as string;

	if (!clientId) {
		return c.json({ error: 'X-Client-Id header required' }, 400);
	}

	try {
		const body = await c.req.json();
		const { collection_id, params } = body;

		if (!collection_id) {
			return c.json({ error: 'collection_id required' }, 400);
		}

		await syncManager.subscribeCollection(collection_id, userId, clientId, params);

		return c.json({ success: true });
	} catch (err) {
		const error = err as Error;
		console.error('Subscribe error:', error);
		return c.json({ error: error.message }, 500);
	}
});

/**
 * Unsubscribe from Collection
 * POST /api/sync/unsubscribe
 *
 * –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–∏
 */
app.post('/unsubscribe', async (c) => {
	const userId = c.get('userId') as string;
	const clientId = c.get('clientId') as string;

	if (!clientId) {
		return c.json({ error: 'X-Client-Id header required' }, 400);
	}

	try {
		const body = await c.req.json();
		const { collection_id } = body;

		if (!collection_id) {
			return c.json({ error: 'collection_id required' }, 400);
		}

		await syncManager.unsubscribeCollection(collection_id, userId, clientId);

		return c.json({ success: true });
	} catch (err) {
		const error = err as Error;
		console.error('Unsubscribe error:', error);
		return c.json({ error: error.message }, 500);
	}
});

/**
 * Differential Sync
 * POST /api/sync
 *
 * –ü–æ–ª—É—á–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º state vector –∫–ª–∏–µ–Ω—Ç–∞
 */
app.post('/', async (c) => {
	const userId = c.get('userId') as string;

	try {
		const body = await c.req.json();
		const { collection_id, state_vector, params } = body;

		if (!collection_id) {
			return c.json({ error: 'collection_id required' }, 400);
		}

		const diff = await syncManager.syncCollection(
			collection_id,
			userId,
			state_vector || {},
			params
		);

		return c.json(diff);
	} catch (err) {
		const error = err as Error;
		console.error('Sync error:', error);
		return c.json({ error: error.message }, 500);
	}
});

/**
 * Stats Endpoint (–¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
 * GET /api/sync/stats
 */
app.get('/stats', async (c) => {
	try {
		const sseStats = sseManager.getStats();
		const subscriptionStats = await syncManager.getSubscriptionStats();

		return c.json({
			sse: sseStats,
			subscriptions: subscriptionStats,
			timestamp: Date.now()
		});
	} catch (err) {
		const error = err as Error;
		console.error('Stats error:', error);
		return c.json({ error: error.message }, 500);
	}
});

export default app;
